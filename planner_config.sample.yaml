# Optionally specify the source database. This can also be passed on the command
# line or through environment variables. 
source:
  host: my-database # overridden by SUBSET_SOURCE_HOST
  port: 3306 # overridden by SUBSET_SOURCE_PORT
  username: my_user # overridden by SUBSET_SOURCE_USERNAME
  password: my_s3cret # overridden by SUBSET_SOURCE_PASSWORD

# Targets define where to start your sampling. Any additional rows brought in
# for any tables will be done just by following foreign keys (except for
# passthrough tables, see below)
targets:
  # Sample 100 users randomly from db1.users
  db1.users:
    amount: 100
    # Additional possible filters
    # in:
    #   user_id: [123, 456, 789]
    # like:
    #   email: ['%@somewhere.com']

  # Sample 10% of rows in db2.gadgets
  db2.gadgets:
    percent: 10.0

# Select tells the planner what tables you want to pull in rows for. Note that
# the planner will pull in additional tables if there are foreign keys pointing
# to them within the already selected tables.
select:
  - db1.*
  - db2.gadgets
  - db2.gizmos-*

# Add additional constraints for some tables. The planner does not attempt to
# verify that these constraints will not break foreign key relationships. In
# general it's always safe to apply constraints to tables that have no incoming
# foreign key constraints among selected tables. This config file does not
# accept arbitrary SQL; however you can manually modify the SQL in the generated
# plan with arbitrary SQL.
table_constraints:
  db1.user-data:
  - column: action_date
    operator: '>'
    expression: '2023-07-01'

# Passthrough tables will be copied in full. Passthrough tables must not have
# foreign keys pointing to non-passthrough tables. The planner will make no
# attempt to follow foreign keys involving passthrough tables. Generally
# relatively constant, lookup data should be marked as passthrough.
passthrough:
  - db1.ui_features

# The planner does its best to generate a plan that will not break foreign key
# relationships. This isn't always possible without some help; here you can tell
# the planner it shouldn't worry about certain relationships so it can generate
# a plan. Foreign keys that exist primarily for de-normalization are especially
# good candidates to be ignored.
ignore_fks:
- src_table: db2.gizmos-foo
  dst_table: db2.gizmos-bar

# Tell the planner about any foreign key relationships that logically exist but
# are not enforced in your database.
extra_fks:
- src_table: db2.gadgets
  src_columns: [user_id]
  dst_table: db1.users
  dst_columns: [id]

# If set to true subsetter will automatically attempt to infer foreign keys
# within a single database. It does this by inferring that a column name that
# matches the name of a primary key column (that is unique within the database)
# should function as a foreign key to that table.
infer_foreign_keys: false
